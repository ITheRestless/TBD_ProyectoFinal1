drop database uwu;
CREATE DATABASE uwu;
USE uwu;

CREATE TABLE usuarios(
    usr_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    usr_correo VARCHAR(255) NOT NULL,
    usr_nombre VARCHAR(255) NOT NULL,
    usr_pwd CHAR(32) NOT NULL,
    usr_currency INTEGER NOT NULL,
    usr_fecha_creacion DATETIME NOT NULL,
    usr_uni_pref INTEGER,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE sesiones(
    ses_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    ses_ip VARCHAR(20) NOT NULL,
    ses_inicio DATETIME NOT NULL,
    ses_fin DATETIME NULL,
    ses_ult_act DATETIME NOT NULL,
    usr_id INT(11) NOT NULL
);

CREATE TABLE roles(
    rol_id INTEGER AUTO_INCREMENT PRIMARY KEY,
	rol_nombre VARCHAR(255) NOT NULL,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE roles_usuario(
    ru_tiempo DATETIME NOT NULL,
    usr_id INT(11) NOT NULL,
    rol_id INTEGER NOT NULL,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE permisos(
    perm_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    perm_permiso CHAR(7) NOT NULL,
    perm_tiempo DATETIME NOT NULL,
    ses_id_creador INTEGER NOT NULL,
    rol_id INTEGER NOT NULL
);

CREATE TABLE inventario_uni(
	inv_un_id integer primary key auto_increment,
	inv_un_usr_id integer,
    inv_un_obtencion DATETIME NOT NULL,
    inv_un_hp INTEGER NOT NULL,
    inv_un_nivel TINYINT NOT NULL,
    inv_un_exp TINYINT NOT NULL,
    inv_un_atk SMALLINT NOT NULL,
    ses_id_creador INTEGER NOT NULL,
    un_id INTEGER NOT NULL
);

CREATE TABLE unidades(
    un_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    un_nombre VARCHAR(30) NOT NULL,
    un_hp INTEGER NOT NULL,
    un_rareza VARCHAR(3) NOT NULL,
    un_atkinc TINYINT NOT NULL,
    un_img VARCHAR(255) NOT NULL,
    un_sprite VARCHAR(255) NOT NULL,
    un_icono VARCHAR(255) NOT NULL,
    ses_id INTEGER NOT NULL
);

CREATE TABLE log(
    inv_un_id INTEGER NOT NULL, 
    ses_id INTEGER NOT NULL,
    id_mision INTEGER NOT NULL,
    log_fecha DATETIME	
);

CREATE TABLE misiones(
    mis_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    mis_nombre VARCHAR(255) NOT NULL,
    ses_id INTEGER NOT NULL
);

CREATE TABLE misiones_enemigos(
    ses_id INTEGER NOT NULL,
    ene_id INTEGER NOT NULL,
    mis_id INTEGER NOT NULL
);

CREATE TABLE enemigos(
    ene_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    ene_nombre VARCHAR(255) NOT NULL,
    ene_atk INTEGER NOT NULL,
    ene_hp INTEGER NOT NULL,
    ene_sprite VARCHAR(255),
    ses_id INTEGER NOT NULL
);


-- CONSTRAINTS:

ALTER TABLE usuarios
ADD CONSTRAINT ses2usr 
FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT usr2rolusu
FOREIGN KEY (usr_id) REFERENCES usuarios(usr_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT rol2rolusu
FOREIGN KEY (rol_id) REFERENCES roles(rol_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT ses2rolusu
FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

ALTER TABLE roles
ADD CONSTRAINT ses2rol
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

ALTER TABLE sesiones
ADD CONSTRAINT usu2ses
FOREIGN KEY (usr_id) REFERENCES usuarios(usr_id);

ALTER TABLE permisos
ADD CONSTRAINT ses2perm
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

ALTER TABLE permisos
ADD CONSTRAINT rol2perm
FOREIGN KEY (rol_id) REFERENCES
roles (rol_id);

ALTER TABLE inventario_uni
ADD CONSTRAINT ses2invuni
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

alter table inventario_uni
add constraint usr2inv_un
foreign key (inv_un_usr_id) references usuarios(usr_id); 

ALTER TABLE inventario_uni
ADD CONSTRAINT unid2inveuni
FOREIGN KEY (un_id) REFERENCES unidades (un_id);

ALTER TABLE unidades
ADD CONSTRAINT ses2uni
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE log
ADD CONSTRAINT invuni2log
FOREIGN KEY (inv_un_id) REFERENCES inventario_uni (inv_un_id);

ALTER TABLE log
ADD CONSTRAINT ses2log
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE log
ADD CONSTRAINT mis2log
FOREIGN KEY (id_mision) REFERENCES misiones (mis_id);

ALTER TABLE misiones
ADD CONSTRAINT ses2mis
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT ses2misen
FOREIGN KEY (ses_id) REFERENCES sesiones(ses_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT ene2misene
FOREIGN KEY (ene_id) REFERENCES enemigos(ene_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT mis2misene
FOREIGN KEY (mis_id) REFERENCES misiones(mis_id);

ALTER TABLE enemigos
ADD CONSTRAINT ses2ene
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

-- ______________________________________________________________________________________________________________


-- 											Procedimientos y Funciones

-- ______________________________________________________________________________________________________________

set global log_bin_trust_function_creators = 1;
delimiter ;;

create Procedure Inicializar()
begin
		ALTER TABLE usuarios
		DROP foreign key ses2usr;

		ALTER TABLE roles_usuario
		DROP foreign key usr2rolusu;

		ALTER TABLE roles_usuario
		DROP foreign key rol2rolusu;

		ALTER TABLE roles_usuario
		DROP foreign key ses2rolusu;

		ALTER TABLE roles
		DROP foreign key ses2rol;

		ALTER TABLE sesiones
		DROP foreign key usu2ses;

		ALTER TABLE permisos
		DROP foreign key ses2perm;

		ALTER TABLE permisos
		DROP foreign key rol2perm;

		insert into usuarios(usr_correo, usr_nombre, usr_pwd, usr_currency, usr_fecha_creacion, ses_id_creador)
		values('master@mail.com', 'GameMaster', md5('qwert12345'), '5', now(), '1');

		insert into sesiones(ses_ip, ses_inicio, ses_fin, ses_ult_act, usr_id)
		values('127.0.0.1', now(), null, now(), '1');

		insert into roles(rol_nombre, ses_id_creador)
		values('super', '1');
        
        insert into roles(rol_nombre, ses_id_creador)
		values('user', '1');

		insert into roles_usuario(ru_tiempo, usr_id, rol_id, ses_id_creador)
		values(now(), '1', '1', '1');

		insert into permisos(perm_permiso, perm_tiempo, ses_id_creador, rol_id)
		values('FFFFFFF', now(), '1', '1');

		insert into permisos(perm_permiso, perm_tiempo, ses_id_creador, rol_id)
		values('0FFFFFF', now(), '1', '2');
        
		ALTER TABLE usuarios
		ADD CONSTRAINT ses2usr 
		FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

		ALTER TABLE roles_usuario
		ADD CONSTRAINT usr2rolusu
		FOREIGN KEY (usr_id) REFERENCES usuarios(usr_id);

		ALTER TABLE roles_usuario
		ADD CONSTRAINT rol2rolusu
		FOREIGN KEY (rol_id) REFERENCES roles(rol_id);

		ALTER TABLE roles_usuario
		ADD CONSTRAINT ses2rolusu
		FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

		ALTER TABLE roles
		ADD CONSTRAINT ses2rol
		FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

		ALTER TABLE sesiones
		ADD CONSTRAINT usu2ses
		FOREIGN KEY (usr_id) REFERENCES usuarios(usr_id);

		ALTER TABLE permisos
		ADD CONSTRAINT ses2perm
		FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

		ALTER TABLE permisos
		ADD CONSTRAINT rol2perm
		FOREIGN KEY (rol_id) REFERENCES
		roles (rol_id);
end;;

delimiter ;;

create procedure IniSes(id integer)
begin
update sesiones set ses_inicio = now() where (id = ses_id);
end;;


-- ______________________________________________________________________________________________________________

delimiter ;;

create procedure CerrSes(id integer)
begin
update sesiones set ses_fin = now() where (id = ses_id);
end;;

-- ______________________________________________________________________________________________________________

delimiter ;;

create procedure doAction(id integer)
begin
update sesiones set ses_ult_act = now() where (sesiones.usr_id = id);
end;;

-- ______________________________________________________________________________________________________________

set global log_bin_trust_function_creators = 1;
delimiter ;;
create function LogIn(correo varchar(255), pass char(32), IP varchar(20))
returns integer
begin

-- Se busca el id de usuario y el de la sesion
select usr_id into @Uid from usuarios where (usr_correo = correo);
select ses_id into @Sid from sesiones where (@Uid = usr_id) AND (IP = ses_ip);
            
-- si existe un usuario con ese correo
if (correo in (select usr_correo from usuarios)) then

	-- si la contraseña es correcta
	if (pass = (select usr_pwd from usuarios where (correo = usr_correo))) then 
        
        -- si no hay una sesion con la ip actual, se añade una nueva
        if (IP not in (select ses_ip from sesiones where (sesiones.usr_id = (select usr_id from usuarios where (usr_correo = correo))))) then
            
            -- insertar nueva sesion con la ip indicada
            insert into sesiones(ses_ip, ses_inicio, ses_fin, ses_ult_act, usr_id) values
            (IP, now(), null, now(), @Uid);
		
        else
            -- Se actuaizan los datos de la sesion actual
            call IniSes(@Sid);
            call doAction(@Sid);
        end if;
    else 
		set @Sid = -2; 
    end if;
else 
	set @Sid = -1;
end if;

return @Sid;
end;;


-- ______________________________________________________________________________________________________________

set global log_bin_trust_function_creators = 1;
delimiter ;;
create function SignUp(correo varchar(255), nombre VARCHAR(255), pwd CHAR(32), IP varchar(20))
returns integer
begin

insert into usuarios(usr_correo, usr_nombre, usr_pwd, usr_currency, usr_fecha_creacion, ses_id_creador)
values (correo, nombre, pwd, '5', now(), '1');

set @Sid = LogIn(correo, pwd, IP);
 
return @Sid;
end;;


-- ________________________________________________________________________________________________________

drop function invocar;
DELIMITER $
CREATE FUNCTION invocar(ses INT)
RETURNS INT
BEGIN
	CALL utilizarFondos(ses);
	SELECT COUNT(*) INTO @tam FROM unidades;
    	SELECT FLOOR(1 + RAND()*(@tam - 1)) INTO @dato;
    	SELECT un_atkinc INTO @atk FROM unidades WHERE (un_id = @dato);
        SELECT un_hp INTO @hp FROM unidades WHERE (un_id = @dato);
    	INSERT INTO inventario_uni (inv_un_obtencion, inv_un_nivel, inv_un_exp, inv_un_atk, inv_un_hp, ses_id_creador, un_id) VALUES (NOW(), 1, 0, @atk, @hp, ses, @dato);
    	RETURN @dato;
END$


-- ________________________________________________________________________________________________________


DELIMITER $
CREATE FUNCTION mostrarInvocacion(ses_id INT)
RETURNS VARCHAR(255)
BEGIN
	SET @dato = invocar(ses_id);
    SET @dirImg = (SELECT un_img FROM unidades WHERE (un_id = @dato));
    RETURN @dirImg;
END $


-- _________________________________________________________________________________________________________

drop procedure utilizarFondos;
DELIMITER $
CREATE PROCEDURE utilizarFondos (id INT)
BEGIN
	select usuarios.usr_id into @usr from usuarios join sesiones on (usuarios.usr_id = sesiones.usr_id) where (id = ses_id);
	UPDATE usuarios
    SET usuarios.usr_currency = usr_currency - 5 where usuarios.usr_id = @usr;
END$

-- _________________________________________________________________________________________________________


-- FUNCIONES Y MÉTODOS DEL INVENTARIO!!!!
DELIMITER $
CREATE PROCEDURE inventarioGenerico (IN ses_id INT)
BEGIN
	SELECT un.un_img FROM unidades AS un INNER JOIN inventario_uni AS iu ON(un.un_id = iu.un_id)
    WHERE inventario_uni.ses_id = ses_id;
END $


-- __________________________________________________________________________________________________________________


DELIMITER $$
CREATE FUNCTION fimgPer(id INT)
RETURNS VARCHAR(255)
BEGIN
SELECT COUNT(*) INTO @tam FROM  unidades WHERE  (id = ses_id);
SELECT un_img INTO @imagen
FROM unidades
WHERE ((select usr_id from sesiones where (ses_id = ses_id_abierta)) = usr_id) AND (un_id = FLOOR(1 + RAND() * (tam - 1)));
RETURN @imagen;
END $$
DELIMITER ;


-- __________________________________________________________________________________________________________________



DELIMITER $$
CREATE FUNCTION fFondos(ses_id_abierta INT)
RETURNS INT
BEGIN
select usr_currency into @fondos from usuarios where ((select usr_id from sesiones where (ses_id = ses_id_abierta)) = usr_id);
RETURN @fondo;
END $$
DELIMITER ;


-- __________________________________________________________________________________________________________________



DELIMITER $$
CREATE FUNCTION fNombre(ses_id_abierta INT)
RETURNS VARCHAR (255)
BEGIN
select usr_nombre INTO @nombre from usuarios where ((select usr_id from sesiones where (ses_id = ses_id_abierta)) = usr_id);
RETURN @nombre;
END $$
DELIMITER ;

-- __________________________________________________________________________________________________________________


DELIMITER $$
CREATE PROCEDURE actualizarFondos(IN compra INT, IN ses_id_abierta INT)
BEGIN 
UPDATE usuarios SET usr_currency = usr_currency + compra
WHERE ((select usr_id from sesiones where (ses_id = ses_id_abierta)) = usr_id);
END $$
DELIMITER ;


-- __________________________________________________________________________________________________________________



											-- Triggers


-- __________________________________________________________________________________________________________________


delimiter ;;

create trigger registraRoles
after insert
on usuarios for each row
begin
insert into roles_usuario(ru_tiempo, usr_id, rol_id, ses_id_creador)
values(now(), new.usr_id, '2', '1');
end;;


-- __________________________________________________________________________________________________________________



delimiter ;;
create trigger SesionAbierta
before update 
on sesiones for each row
begin
	if (old.ses_fin = null) then
			set new.ses_fin = now();
	end if;
end;;


-- __________________________________________________________________________________________________________________



delimiter ;;

create trigger VerificarFondos
before update 
on usuarios for each row
begin
	if (new.usr_currency > 100) then
			set new.usr_currency = 100;
	end if;
end;;


-- _________________________________________________________________________________________________________________


													-- Vistas


-- _________________________________________________________________________________________________________________



CREATE VIEW seleccionarUsuarios AS
SELECT usr_nombre AS 'Usuario', usr_fecha_creacion AS 'Inicio' FROM usuarios ORDER BY usr_nombre LIMIT 3;


-- __________________________________________________________________________________________________________________


delimiter ;

call Inicializar();
select SignUp('restlessdisaster@gmail.com', 'TheRestless', md5('olamundo'), '127.0.0.1');

INSERT INTO unidades (un_nombre, un_hp, un_rareza, un_atkinc, un_img, un_sprite, un_icono, ses_id)
VALUES 
('Albert', 100, 'SSR', 3, 'personajes\\imagenes\\albert_img.png', 'personajes\\sprites\\albert_sprite.png', 'personajes\\iconos\\albert_icono.png', 1),
('Eugen', 150, 'SSR', 3, 'personajes\\imagenes\\eugen_img.png', 'personajes\\sprites\\eugen_sprite.png', 'personajes\\iconos\\eugen_icono.png', 1),
('Juri', 125, 'SSR', 3, 'personajes\\imagenes\\juri_img.png', 'personajes\\sprites\\juri_sprite.png', 'personajes\\iconos\\juri_icono.png', 1),
('Lecia', 90, 'SSR', 3, 'personajes\\imagenes\\lecia_img.png', 'personajes\\sprites\\lecia_sprite.png', 'personajes\\iconos\\lecia_icono.png', 1),
('Nicholas', 200, 'SSR', 3, 'personajes\\imagenes\\nico_img.png', 'personajes\\sprites\\nico_sprite.png', 'personajes\\iconos\\nico_icono.png', 1),
('Olivia', 180, 'SSR', 3, 'personajes\\imagenes\\olivia_img.png', 'personajes\\sprites\\olivia_sprite.png', 'personajes\\iconos\\olivia_icono.png', 1),
('Percyval', 200, 'SSR', 3, 'personajes\\imagenes\\percy_img.png', 'personajes\\sprites\\percy_sprite.png', 'personajes\\iconos\\percy_icono.png', 1),
('Rackam', 140, 'SSR', 3, 'personajes\\imagenes\\rackam_img.png', 'personajes\\sprites\\rackam_sprite.png', 'personajes\\iconos\\rackam_icono.png', 1),
('Seruel', 160, 'SSR', 3, 'personajes\\imagenes\\seruel_img.png', 'personajes\\sprites\\seruel_sprite.png', 'personajes\\iconos\\seruel_icono.png', 1),
('Siegfried', 250, 'SSR', 3, 'personajes\\imagenes\\Sieg_img.png', 'personajes\\sprites\\Sieg_sprite.png', 'personajes\\iconos\\Sieg_icono.png', 1);


select * from usuarios;

select LogIn('master@mail.com', md5('qwert12345'), '127.0.0.1');

select * from sesiones;

call utilizarFondos('2');
select mostrarInvocacion('2');
select MAX(inv_un_id) from inventario_uni 
                            join usuarios on (usr_id)
                            join sesiones on (ses_id = '2');
                    