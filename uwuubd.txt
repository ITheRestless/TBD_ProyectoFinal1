drop database uwu;
CREATE DATABASE uwu;
USE uwu;

CREATE TABLE usuarios(
    usr_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    usr_correo VARCHAR(255) NOT NULL,
    usr_nombre VARCHAR(255) NOT NULL,
    usr_pwd CHAR(32) NOT NULL,
    usr_currency INTEGER NOT NULL,
    usr_fecha_creacion DATETIME NOT NULL,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE sesiones(
    ses_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    ses_ip VARCHAR(15) NOT NULL,
    ses_inicio DATETIME NOT NULL,
    ses_fin DATETIME NULL,
    ses_ult_act DATETIME NOT NULL,
    usr_id INT(11) NOT NULL
);

CREATE TABLE roles(
    rol_id INTEGER AUTO_INCREMENT PRIMARY KEY,
	rol_nombre VARCHAR(255) NOT NULL,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE roles_usuario(
    ru_tiempo DATETIME NOT NULL,
    usr_id INT(11) NOT NULL,
    rol_id INTEGER NOT NULL,
    ses_id_creador INTEGER NOT NULL
);

CREATE TABLE permisos(
    perm_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    perm_permiso CHAR(7) NOT NULL,
    perm_tiempo DATETIME NOT NULL,
    ses_id_creador INTEGER NOT NULL,
    rol_id INTEGER NOT NULL
);

CREATE TABLE inventario_uni(
    inv_un_ud INTEGER AUTO_INCREMENT PRIMARY KEY,
    inv_un_obtencion DATETIME NOT NULL,
    inv_un_hp INTEGER NOT NULL,
    inv_un_nivel TINYINT NOT NULL,
    inv_un_exp TINYINT NOT NULL,
    inv_un_atk SMALLINT NOT NULL,
    ses_id_creador INTEGER NOT NULL,
    un_id INTEGER NOT NULL
);

CREATE TABLE unidades(
    un_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    un_nombre VARCHAR(30) NOT NULL,
    un_hp INTEGER NOT NULL,
    un_rareza VARCHAR(3) NOT NULL,
    un_atkinc TINYINT NOT NULL,
    un_img VARCHAR(255) NOT NULL,
    un_sprite VARCHAR(255) NOT NULL,
    un_icono VARCHAR(255) NOT NULL,
    ses_id INTEGER NOT NULL
);

CREATE TABLE log(
    inv_un_id INTEGER NOT NULL, 
    ses_id INTEGER NOT NULL,
    id_mision INTEGER NOT NULL,
    log_fecha DATETIME	
);

CREATE TABLE misiones(
    mis_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    mis_nombre VARCHAR(255) NOT NULL,
    ses_id INTEGER NOT NULL
);

CREATE TABLE misiones_enemigos(
    ses_id INTEGER NOT NULL,
    ene_id INTEGER NOT NULL,
    mis_id INTEGER NOT NULL
);

CREATE TABLE enemigos(
    ene_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    ene_nombre VARCHAR(255) NOT NULL,
    ene_atk INTEGER NOT NULL,
    ene_hp INTEGER NOT NULL,
    ene_sprite VARCHAR(255),
    ses_id INTEGER NOT NULL
);


-- CONSTRAINTS:

ALTER TABLE usuarios
ADD CONSTRAINT ses2usr 
FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT usr2rolusu
FOREIGN KEY (usr_id) REFERENCES usuarios(usr_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT rol2rolusu
FOREIGN KEY (rol_id) REFERENCES roles(rol_id);

ALTER TABLE roles_usuario
ADD CONSTRAINT ses2rolusu
FOREIGN KEY (ses_id_creador) REFERENCES sesiones(ses_id);

ALTER TABLE roles
ADD CONSTRAINT ses2rol
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

ALTER TABLE sesiones
ADD CONSTRAINT usu2ses
FOREIGN KEY (usr_id_creador) REFERENCES usuarios(usr_id);

ALTER TABLE permisos
ADD CONSTRAINT ses2perm
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

ALTER TABLE permisos
ADD CONSTRAINT rol2perm
FOREIGN KEY (rol_id) REFERENCES
roles (rol_id);

ALTER TABLE inventario_uni
ADD CONSTRAINT ses2invuni
FOREIGN KEY (ses_id_creador) REFERENCES sesiones (ses_id);

ALTER TABLE inventario_uni
ADD CONSTRAINT unid2inveuni
FOREIGN KEY (un_id) REFERENCES unidades (un_id);

ALTER TABLE unidades
ADD CONSTRAINT ses2uni
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE log
ADD CONSTRAINT invuni2log
FOREIGN KEY (inv_un_id) REFERENCES inventario_uni (inv_un_ud);

ALTER TABLE log
ADD CONSTRAINT ses2log
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE log
ADD CONSTRAINT mis2log
FOREIGN KEY (id_mision) REFERENCES misiones (mis_id);

ALTER TABLE misiones
ADD CONSTRAINT ses2mis
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT ses2misen
FOREIGN KEY (ses_id) REFERENCES sesiones(ses_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT ene2misene
FOREIGN KEY (ene_id) REFERENCES enemigos(ene_id);

ALTER TABLE misiones_enemigos
ADD CONSTRAINT mis2misene
FOREIGN KEY (mis_id) REFERENCES misiones(mis_id);

ALTER TABLE enemigos
ADD CONSTRAINT ses2ene
FOREIGN KEY (ses_id) REFERENCES sesiones (ses_id);

-- ______________________________________________________________________________________________________________


-- 											Procedimientos y Funciones

-- ______________________________________________________________________________________________________________

delimiter ;;

create procedure IniSes(id integer)
begin
update sesiones set ses_inicio = now() where (id = ses_id);
end;;


-- ______________________________________________________________________________________________________________

delimiter ;;

create procedure CerrSes(id integer)
begin
update sesiones set ses_fin = now() where (id = ses_id);
end;;

-- ______________________________________________________________________________________________________________

delimiter ;;

create procedure doAction(id integer)
begin
update sesiones set ses_ult_act = now() where (sesiones.usr_id = id);
end;;

-- ______________________________________________________________________________________________________________

set global log_bin_trust_function_creators = 1;
delimiter ;;

create function LogIn(correo varchar(255), pass char(255), IP varchar(16))
returns integer
begin

-- Se busca el id de usuario y el de la sesion
select usr_id into @Uid from sesiones where (usr_correo = correo);
select ses_id into @Sid from sesiones where (@Uid = usr_id) AND (IP = ses_ip);
            
-- si existe un usuario con ese correo
if (correo in (select usr_correo from usuarios)) then

	-- si la contraseña es correcta
	if (md5(pass) = (select usr_pass from usuarios where (correo = usr_correo))) then 
        
        -- si no hay una sesion con la ip actual, se añade una nueva
        if (IP not in (select ses_ip from sesiones where (sesiones.usr_id = (select usr_id from usuarios where (usr_correo = correo))))) then
            
            -- guardar id del usuario
            select usr_id into @id from sesiones where (usr_correo = correo);
            
            -- insertar nueva sesion con la ip indicada
            insert into sesiones(ses_ip, ses_inicio, ses_fin, ses_ult_act, usr_id) values
            (IP, now(), null, now(), @id);
		
        else
			
            -- Se actuaizan los datos de la sesion actual
            call IniciSes(@Sid);
            call doAction(@Sid);
		
        end if;
    else 
		set @Sid = -1; 
    end if;
else 
	set @Sid = -1;
end if;

return @Sid;
end;;


-- ______________________________________________________________________________________________________________


set global log_bin_trust_function_creators = 1;
delimiter ;;

create function SignUp(correo varchar(255), nombre VARCHAR(255), pwd VARCHAR(255), currency INTEGER, fecha_creacion datetime, id_creador integer, IP varchar(15))
returns integer
begin

insert into usuarios(usr_correo, usr_nombre, usr_pwd, usr_currency, usr_fecha_creacion, ses_id_creador)
values (correo, nombre, md5(pwd), '5', now(), '1');

set @Sid = LogIn(correo, pwd, IP);
 
return @Sid;
end;;


-- ________________________________________________________________________________________________________


DELIMITER $
CREATE FUNCTION invocar(ses_id INT)
RETURNS INT
BEGIN
	CALL utilizarFondos(ses_id);
	SELECT COUNT(*) INTO @tam FROM unidades;
    	SELECT FLOOR(1 + RAND()*(@tam - 1)) INTO @dato;
    	SELECT un_atkinc INTO @atk FROM unidades WHERE (un_id = @dato);
    	INSERT INTO inventario_uni (inv_un_obtencion, inv_un_nivel, inv_un_exp, inv_un_atk, ses_id, un_id) VALUES (NOW(), 1, 0, @atk, ses_id, @dato);
    	RETURN @dato;
END$


-- ________________________________________________________________________________________________________


DELIMITER $
CREATE FUNCTION mostrarInvocacion(ses_id INT)
RETURNS VARCHAR(255)
BEGIN
	SET @dato = invocar(ses_id);
    SET @dirImg = (SELECT un_img FROM unidades WHERE un_img = @dato);
    RETURN @dirImg;
END $

-- _________________________________________________________________________________________________________


-- Habilita el botón de invocar
CREATE FUNCTION verificarFondos(id INT)
RETURNS BOOLEAN
BEGIN
	SELECT usuarios.usr_currency INTO @fondos FROM usuarios WHERE (ses_id = id);
	IF(@fondos > 5) THEN
    	return TRUE;
    ELSE
    	return FALSE;
    END IF;
END$


-- _________________________________________________________________________________________________________


DELIMITER $
CREATE PROCEDURE utilizarFondos (IN ses_id INT)
BEGIN
	UPDATE usuarios
    SET usuarios.usr_currency = usr_currency - 5;
END$

-- _________________________________________________________________________________________________________


-- FUNCIONES Y MÉTODOS DEL INVENTARIO!!!!
DELIMITER $
CREATE PROCEDURE inventarioGenerico (IN ses_id INT)
BEGIN
	SELECT un.un_img FROM unidades AS un INNER JOIN inventario_uni AS iu ON(un.un_id = iu.un_id)
    WHERE inventario_uni.ses_id = ses_id;
END $

-- __________________________________________________________________________________________________________________


delimiter ;;

create trigger ConfirmarRegistro
before insert 
on usuarios for each row
begin
	if (new.usr_correo in (usr_correo)) then 
		set new.correo = null;
	end if;
end;;





